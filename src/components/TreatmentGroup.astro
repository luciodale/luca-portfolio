---
interface Props {
  title: string;
  description?: string;
}

const { title, description } = Astro.props;
---

<div
  class="p-4 md:p-6 bg-secondary mx-auto w-full md:max-w-2xl relative shadow-md flex flex-col"
>
  <div
    class="flex items-center justify-between cursor-pointer toggle-description"
  >
    <h1 class="text-xl sm:text-2xl uppercase font-light">{title}</h1>
    <svg
      xmlns="http://www.w3.org/2000/svg"
      class="h-6 w-6 transition-transform duration-300 shrink-0"
      fill="none"
      viewBox="0 0 24 24"
      stroke="currentColor"
      stroke-width="2"
    >
      <path stroke-linecap="round" stroke-linejoin="round" d="M19 9l-7 7-7-7"
      ></path>
    </svg>
  </div>

  <div
    class="description-content max-h-0 overflow-hidden transition-[max-height] duration-500 ease-in-out opacity-0"
  >
    <p class="mt-4 text-lg text-gray-700 overflow-y-auto h-36">{description}</p>
  </div>
</div>

<script>
  document.addEventListener("DOMContentLoaded", () => {
    const cards = document.querySelectorAll(".toggle-description");

    cards.forEach((card) => {
      card.addEventListener("click", () => {
        const descriptionContent = card.nextElementSibling;
        const arrowIcon = card.querySelector("svg");

        if (!descriptionContent) return;
        if (!arrowIcon) return;

        if (descriptionContent.classList.contains("max-h-0")) {
          descriptionContent.classList.remove("max-h-0", "opacity-0");
          descriptionContent.classList.add("max-h-40", "opacity-100");
          arrowIcon.classList.add("rotate-180");
        } else {
          descriptionContent.classList.add("max-h-0", "opacity-0");
          descriptionContent.classList.remove("max-h-40", "opacity-100");
          arrowIcon.classList.remove("rotate-180");
        }
      });
    });
  });
</script>
